{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,UAKa,CACXC,OAAQC,SAASC,iBAAiB,SAClCC,OAAQF,SAASG,cAAc,YAmC5BD,OAAOE,iBAAiB,SAyB7B,SAAsBC,G,kBAOlBC,YAAW,WACTC,cAAcC,EAAUC,GACrBC,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MACjBC,EAAAjB,GAASkB,OAAOC,QACd,uBAAwCC,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,IAGjDK,OAAM,SAAAP,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MAClBC,EAAAjB,GAASkB,OAAOI,QACd,sBAAqCF,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,MAGhDJ,GACHA,GAASW,EACTC,QAAQC,O,EApBVjB,EAAIkB,iBAKJ,IAJA,IAAId,EAAQe,OAAOnB,EAAIoB,OAAOZ,MAAMa,OAChCC,EAASH,OAAOnB,EAAIoB,OAAOE,OAAOD,OAClCN,EAAOI,OAAOnB,EAAIoB,OAAOL,KAAKM,OAEzBE,EAAW,EAAGA,GAAYD,EAAQC,GAAY,EAACC,EAAAD,E,CA/BnBE,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n// Напиши скрипт, который при сабмите формы вызывает функцию\n// createPromise(position, delay) столько раз, сколько ввели в поле amount.\n// При каждом вызове передай ей номер создаваемого промиса(position) и\n// задержку учитывая введенную пользователем первую задержку(delay) и шаг(step).\nconst refs = {\n  inputs: document.querySelectorAll('input'),\n  submit: document.querySelector('button'),\n};\n\n// const STORAGE_KEY = 'input-values';\n// let formData = localStorage.getItem(STORAGE_KEY)\n//   ? JSON.parse(localStorage.getItem(STORAGE_KEY))\n//   : {};\n\n// const settings = {\n//   firstDelay: refs.inputs[0].value,\n//   delayStep: 'refs.inputs[1].value',\n//   amount: 'refs.inputs[2].value',\n// };\n// console.log(refs.inputs[0]);\n// localStorage.setItem('settings', JSON.stringify(settings));\n\n// refs.inputs[0].addEventListener('input', onTextInput());\n\n// function onTextInput(event) {\n//   // console.log((formData[event.target.name] = event.target.value));\n//   formData[event.target.name] = event.target.value;\n//   localStorage.setItem(STORAGE_KEY, JSON.stringify(formData));\n// }\n// let delay = firstDelay;\n// function onClickSubmit() {\n//   console.log('Нажата кнопка Create promises');\n//   for (let i = 1; i <= amount; i++) {\n//     const position = i;\n//     console.log(`Position value is ${position}`);\n//     createPromise(position, delay);\n//     delay += delayStep;\n//     console.log(`Delay value is ${delay}`);\n//   }\n// }\n\nrefs.submit.addEventListener('submit', onSubmitForm());\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   } else {\n//     // Reject\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   }\n// }\n// Дополни код функции createPromise так, чтобы она возвращала один промис,\n// который выполянется или отклоняется через delay времени.Значением промиса\n// должен быть объект, в котором будут свойства position и delay со значениями\n// одноименных параметров.Используй начальный код функции для выбора того,\n// что нужно сделать с промисом - выполнить или отклонить.\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\nfunction onSubmitForm(evt) {\n  evt.preventDefault();\n  let delay = Number(evt.target.delay.value);\n  let amount = Number(evt.target.amount.value);\n  let step = Number(evt.target.step.value);\n\n  for (let position = 1; position <= amount; position += 1) {\n    setTimeout(() => {\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        });\n    }, delay);\n    delay += step;\n    formats.reset();\n  }\n}\n"],"names":["$iU1Pc","parcelRequire","inputs","document","querySelectorAll","submit","querySelector","addEventListener","evt","setTimeout","createPromise","position1","delay1","then","param","position","delay","$parcel$interopDefault","Notify","success","concat","catch","failure","step","formats","reset","preventDefault","Number","target","value","amount","position11","_loop","$ce04d3a99e08e73b$var$onSubmitForm"],"version":3,"file":"03-promises.c1ca41d6.js.map"}