{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAMMC,EAAO,CACXC,OAAQC,SAASC,iBAAiB,SAClCC,OAAQF,SAASG,cAAc,WAG3BC,EAAaN,EAAKC,OAAO,GAAGM,MAC5BC,EAAYR,EAAKC,OAAO,GAAGM,MAC3BE,EAAST,EAAKC,OAAO,GAAGM,MAC1BG,EAAQJ,EAYZ,SAASK,EAAcC,EAAUC,GACTC,KAAKC,SAAW,GAEpCC,EAAAlB,GAASmB,OAAOC,QAAQ,uBAAwCC,OAAfP,EAAS,QAAYO,OAANN,EAAM,OAEtEG,EAAAlB,GAASmB,OAAOG,QAAQ,sBAAuCD,OAAfP,EAAS,QAAYO,OAANN,EAAM,M,CAfzEb,EAAKI,OAAOiB,iBAAiB,SAE7B,SAAsBC,GACpB,IAAK,IAAIC,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAAG,CAEnCZ,EADeY,EACSb,GACxBA,GAASF,C,EAN0BgB,CAAaf,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n// import throttle from 'lodash.throttle';\n// Напиши скрипт, который при сабмите формы вызывает функцию\n// createPromise(position, delay) столько раз, сколько ввели в поле amount.\n// При каждом вызове передай ей номер создаваемого промиса(position) и\n// задержку учитывая введенную пользователем первую задержку(delay) и шаг(step).\nconst refs = {\n  inputs: document.querySelectorAll('input'),\n  submit: document.querySelector('button'),\n};\n\nconst firstDelay = refs.inputs[0].value;\nconst delayStep = refs.inputs[1].value;\nconst amount = refs.inputs[2].value;\nlet delay = firstDelay;\n\nrefs.submit.addEventListener('submit', onSubmitForm(amount));\n\nfunction onSubmitForm(amount) {\n  for (let i = 1; i <= amount; i += 1) {\n    let position = i;\n    createPromise(position, delay);\n    delay += delayStep;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  } else {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  }\n}\n// refs.inputs[0].addEventListener('input', throttle(onTextInput, 500));\n// refs.inputs[1].addEventListener('input', throttle(onTextInput, 500));\n// refs.inputs[2].addEventListener('input', throttle(onTextInput, 500));\n\n// populateTextarea();\n\n// function onTextInput(event) {\n//   // console.log((formData[event.target.name] = event.target.value));\n//   formData[event.target.name] = event.target.value;\n//   localStorage.setItem(STORAGE_KEY, JSON.stringify(formData));\n// }\n\n// 2. При загрузке страницы проверяй состояние хранилища, и если там есть сохраненные\n// данные, заполняй ими поля формы.В противном случае поля должны быть пустыми.\n// function populateTextarea() {\n//   const savedMessage = JSON.parse(localStorage.getItem(STORAGE_KEY));\n//   console.log(savedMessage);\n//   if (savedMessage) {\n//     refs.inputs[0].value = savedMessage.delay || '';\n//     refs.inputs[1].value = savedMessage.step || '';\n//     refs.inputs[2].value = savedMessage.amount || '';\n//   }\n// }\n\n// 3. При сабмите формы очищай хранилище и поля формы, а также выводи объект с\n// полями delay, step, amount  и текущими их значениями в консоль.\n// function onFormSubmit(event) {\n//   console.log('сработала функция onFormSubmit');\n//   event.preventDefault();\n\n//   if (refs.inputs[0].value && refs.inputs[1].value && refs.inputs[2].value) {\n//     console.log('Отправляем форму');\n//     event.currentTarget.reset();\n//     console.log(JSON.parse(localStorage.getItem(STORAGE_KEY)));\n//     localStorage.removeItem(STORAGE_KEY);\n//     formData = {};\n//   }\n// }\n\n// function createPromise(position, delay) {\n//   const savedMessage = JSON.parse(localStorage.getItem(STORAGE_KEY));\n//   let actualDelay = savedMessage.delay;\n//   console.log(actualDelay);\n//   console.log(savedMessage.amount);\n//   for (\n//     let position = 1;\n//     position <= Number(savedMessage.amount);\n//     position += 1\n//   ) {\n//     const promis = new Promise((resolve, reject) => {\n//       const shouldResolve = Math.random() > 0.3;\n//       setTimeout(() => {\n//         if (shouldResolve) {\n//           // Fulfill\n//           console.log('создаем промис успешено');\n//           Notiflix.Notify.success(\n//             `✅ Fulfilled promise ${position} in ${actualDelay}ms`\n//           );\n//         } else {\n//           // Reject\n//           console.log('создаем промис неуспешно');\n//           Notiflix.Notify.failure(\n//             `❌ Rejected promise ${position} in ${actualDelay}ms`\n//           );\n//         }\n//       }, actualDelay);\n//       actualDelay += Number(savedMessage.step);\n//     });\n//   }\n// }\n\n// Дополни код функции createPromise так, чтобы она возвращала один промис,\n// который выполянется или отклоняется через delay времени.Значением промиса\n// должен быть объект, в котором будут свойства position и delay со значениями\n// одноименных параметров.Используй начальный код функции для выбора того,\n// что нужно сделать с промисом - выполнить или отклонить.\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","inputs","document","querySelectorAll","submit","querySelector","$ce04d3a99e08e73b$var$firstDelay","value","$ce04d3a99e08e73b$var$delayStep","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$createPromise","position","delay1","Math","random","$parcel$interopDefault","Notify","success","concat","failure","addEventListener","amount1","i","$ce04d3a99e08e73b$var$onSubmitForm"],"version":3,"file":"03-promises.c35def63.js.map"}