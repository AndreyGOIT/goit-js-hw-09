{"mappings":"gfAAAA,EAAA,SAMwD,IAAlDC,EAAO,CACXC,WAAYC,SAASC,cAAc,uBACnCC,UAAWF,SAASC,cAAc,sBAClCE,OAAQH,SAASC,cAAc,wBAC/BG,OAAQJ,SAASC,cAAc,WAG3BI,EAAaP,EAAKC,WAAWO,MAC7BC,EAAYT,EAAKI,UAAUI,MAC3BE,EAASV,EAAKK,OAAOG,MACvBG,EAAQJ,EAmBZ,SAASK,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAWtC,OATgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUS,MAAAR,IAEpBM,EAAO,CAAEP,WAAUS,MAAAR,G,GAEpBA,E,IAZPd,EAAKM,OAAOiB,iBAAiB,UAfR,SAAAC,GACnBA,EAAMC,iBACN,IAAK,IAAIC,EAAI,EAAGA,GAAKhB,EAAQgB,GAAK,EAAG,CAGnCd,EAFec,EAESf,GACrBgB,MAAK,SAAAC,G,IAAGf,EAAQe,EAARf,SAAUgB,EAAKD,EAALN,MACjBQ,QAAQC,IAAI,uBAAwCC,OAAfnB,EAAS,QAAYmB,OAANH,EAAM,M,IAE3DI,OAAM,SAAAL,G,IAAGf,EAAQe,EAARf,SAAUqB,EAAKN,EAALN,MAClBQ,QAAQC,IAAI,sBAAqCC,OAAfnB,EAAS,QAAYmB,OAANE,EAAM,M,IAE3DvB,GAASF,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n// import throttle from 'lodash.throttle';\n// Напиши скрипт, который при сабмите формы вызывает функцию\n// createPromise(position, delay) столько раз, сколько ввели в поле amount.\n// При каждом вызове передай ей номер создаваемого промиса(position) и\n// задержку учитывая введенную пользователем первую задержку(delay) и шаг(step).\nconst refs = {\n  firstDelay: document.querySelector('input[name=\"delay\"]'),\n  delayStep: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n  submit: document.querySelector('button'),\n};\n\nconst firstDelay = refs.firstDelay.value;\nconst delayStep = refs.delayStep.value;\nconst amount = refs.amount.value;\nlet delay = firstDelay;\n\nconst onSubmitForm = event => {\n  event.preventDefault();\n  for (let i = 1; i <= amount; i += 1) {\n    let position = i;\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += delayStep;\n  }\n};\nrefs.submit.addEventListener('submit', onSubmitForm);\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n  return promise;\n}\n"],"names":["parcelRequire","$ce04d3a99e08e73b$var$refs","firstDelay","document","querySelector","delayStep","amount","submit","$ce04d3a99e08e73b$var$firstDelay","value","$ce04d3a99e08e73b$var$delayStep","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$createPromise","position","delay3","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","delay","addEventListener","event","preventDefault","i","then","param","delay1","console","log","concat","catch","delay2"],"version":3,"file":"03-promises.4c15bd4f.js.map"}