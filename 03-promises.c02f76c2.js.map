{"mappings":"oeAAAA,EAAA,SAMwD,MAAlDC,EAAO,CACXC,WAAYC,SAASC,cAAc,uBACnCC,UAAWF,SAASC,cAAc,sBAClCE,OAAQH,SAASC,cAAc,wBAC/BG,OAAQJ,SAASC,cAAc,WAG3BI,EAAaP,EAAKC,WAAWO,MAC7BC,EAAYT,EAAKI,UAAUI,MAC3BE,EAASV,EAAKK,OAAOG,MAC3B,IAAIG,EAAQJ,EAkBZ,SAASK,EAAcC,EAAUC,GACTC,KAAKC,SAe3B,OAbgB,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,KAOU,GAGlBN,EAAM,G,CAhBbd,EAAKM,OAAOe,iBAAiB,UAdR,KACnB,IAAK,IAAIC,EAAI,EAAGA,GAAKZ,EAAQY,GAAK,EAAG,CAGnCV,EAFeU,EAESX,GACrBY,MAAK,EAACV,SAAEA,EAAUW,MAAAC,MACjBC,QAAQC,IAAI,uBAAqBd,QAAiBY,MAAU,IAE7DG,OAAM,EAACf,SAAEA,EAAUW,MAAAK,MAClBH,QAAQC,IAAI,sBAAoBd,QAAegB,MAAU,IAE7DlB,GAASF,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n// import throttle from 'lodash.throttle';\n// Напиши скрипт, который при сабмите формы вызывает функцию\n// createPromise(position, delay) столько раз, сколько ввели в поле amount.\n// При каждом вызове передай ей номер создаваемого промиса(position) и\n// задержку учитывая введенную пользователем первую задержку(delay) и шаг(step).\nconst refs = {\n  firstDelay: document.querySelector('input[name=\"delay\"]'),\n  delayStep: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n  submit: document.querySelector('button'),\n};\n\nconst firstDelay = refs.firstDelay.value;\nconst delayStep = refs.delayStep.value;\nconst amount = refs.amount.value;\nlet delay = firstDelay;\n\nconst onSubmitForm = () => {\n  for (let i = 1; i <= amount; i += 1) {\n    let position = i;\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += delayStep;\n  }\n};\nrefs.submit.addEventListener('submit', onSubmitForm);\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        {\n          position, delay;\n        }\n      } else {\n        {\n          position, delay;\n        }\n      }\n    }, delay);\n  });\n  return promise;\n}\n"],"names":["parcelRequire","$47d4ff9957288465$var$refs","firstDelay","document","querySelector","delayStep","amount","submit","$47d4ff9957288465$var$firstDelay","value","$47d4ff9957288465$var$delayStep","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$delay","$47d4ff9957288465$var$createPromise","position","delay3","Math","random","Promise","resolve","reject","setTimeout","addEventListener","i","then","delay","delay1","console","log","catch","delay2"],"version":3,"file":"03-promises.c02f76c2.js.map"}